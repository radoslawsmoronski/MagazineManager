<?xml version="1.0" encoding="utf-8" ?>
<commands>
  <category name="User management">
    
    
  <command name="addUser">
    <short-description>Command to add user.</short-description>
    <long-description>
      [Flags]
       addUser -a     Add a user where all user parameters must be provided.
       addUser -r     Quickly add a user or huge amount of users which then all datas will be generated.
       addUser -s     Quickly add a user, you need write just a login and password, the rest of the information will be generated.


      [Construction addUser -s] addUser-s '{login}' '{password}'

       {login} -> string   |  'text'
       {password} -> string   |  'text'

       for example. addUsers-s 'admin' '1234'


      [Construction] addUser -r '{amount of users}'

       {amount of users} -> int  |   'number', Argument is not necessarily, without that developer tool will create 1 user.

       for example. addUsers-s '1', addUsers-s or addUsers-s '874'


      [Construction] addUser -a '{login}' '{password}' '{name}' '{surname}' '{email}' '{position}' '{hierarchy}' '{canAddUser}' '{canDeleteUser}' '{canEditUser}'

       {login} -> string   |  'text'
       {password} -> string  |  'text'
       {name} -> string  |   'text'
       {surname} -> string   |   'text'
       {email} -> string   |  'text'
       {position} -> string   |  'text'
       {hierarchy} -> int  |   'number'
       {canAddUser} -> bool   |  'true' or 'false'
       {canDeleteUser} -> bool  |   'true' or 'false'
       {canEditUser} -> bool  |   'true' or 'false'

       To add an argument, you must enter it between '{argument}' characters.

       for example. addUsers-a 'login' 'password' 'name' 'surname' 'email' 'position' '5' 'true' 'false' 'true'
    </long-description>
  </command>
    
   <command name="editUser">
    <short-description>Command to edit users datas.</short-description>
    <long-description>
      [Description] Command to edit users datas.

      [Construction] editUser {flag}... '{login}' '{attributes}'...
      
       {flag} -> This is sign of element what you want to edit.
       '{login}' -> Login of user you want to change something.
       '{attributes}' -> Text, number of bool to write.

      [Flags]
       -l | login
       -ps | password
       -n | name
       -s | surname
       -e | email
       -p | position
       -h | hierarchy
       -cau | can add user permission
       -cdu | can delete user permission
       -ceu | can edit user permission

      for example. editUser -l 'login' 'new login', editUser -l -ps 'login' 'new login' 'new password'
    </long-description>
  </command>
      
  <command name="showUser">
    <short-description>Command to show details of user by provide login as a argument.</short-description>
    <long-description>
      [Description] Command to show details of user by provide login as a argument.

      [Construction] showUser {login}

      {login} -> string   |  text

      for example. showUser login
    </long-description>
  </command>
    
  <command name="deleteUser">
    <short-description>Command to delete user by provide login as a argument.</short-description>
    <long-description>
      [Description] Command to delete user by provide login as a argument.

      [Construction] deleteUser-l {login}

      {login} -> string   |  text

      for example. deleteUser login
    </long-description>
  </command>
    
    
</category>
  
  
  
  
<category name="Console management">
  
  
  <command name="clear">
    <short-description>Command to clear consolde of the CmdDeveloperTool</short-description>
    <long-description>
      [Description] Command to clear consolde of the CmdDeveloperTool

      [Construction] clear

    </long-description>
  </command>
  
  <command name="exit">
    <short-description>Command to exit the CmdDeveloperTool</short-description>
    <long-description>
      [Description] Command to exit the CmdDeveloperTool

      [Construction] exit

    </long-description>
  </command>
  
  
</category>
</commands>
